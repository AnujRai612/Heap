vector<int> mergeKArrays(vector<vector<int>> arr, int K){
        int n = arr[0].size();
        
        //Making a min heap to store three things(value,row,column)   column=index
        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>> p;
        
        //Pushing first element(0th index) of all the arrays.
        for(int i=0;i<K;i++){
                p.push({arr[i][0],{i,0}});
        }
        
        vector<int>res;
        while(p.size()){
        
        //Taking value from the heap and pushing it in result and row and column to move to next element in the array which was poped out.
            int value = p.top().first;
            int row = p.top().second.first;
            int column = p.top().second.second;
            res.push_back(value);
            p.pop();
            
            //Checking the condition that next element(1st index) is present in the array then only push it.
            if(column< n-1)
            p.push({arr[row][column+1],{row,column+1}});
        }
        return res;
    }
